---
description:
globs:
alwaysApply: true
---
# Pinterest to Telegram Daily Pin Bot

## PROJECT OVERVIEW
You are building a serverless TypeScript application that runs daily on Cloudflare Workers. The bot fetches a random pin from Pinterest using an undocumented API and sends it via Telegram.

## CORE REQUIREMENTS
- **Platform**: Cloudflare Workers (free tier)
- **Language**: TypeScript (strict mode)
- **Scheduling**: Daily execution via Cloudflare Cron Triggers
- **APIs**: Pinterest API (undocumented), Telegram Bot API
- **Architecture**: Serverless, stateless, minimalistic

## PROJECT STRUCTURE
```
src/
‚îú‚îÄ‚îÄ index.ts          # Main worker entry point with scheduled handler
‚îú‚îÄ‚îÄ pinterest.ts      # Pinterest API client
‚îú‚îÄ‚îÄ telegram.ts       # Telegram Bot API client
‚îú‚îÄ‚îÄ types.ts          # TypeScript interfaces and types
‚îî‚îÄ‚îÄ utils.ts          # Utility functions
wrangler.toml         # Cloudflare Workers configuration
package.json          # Dependencies and scripts
```

## ENVIRONMENT VARIABLES
- `PINTEREST_COOKIE` (secret) - Pinterest authentication cookie
- `TELEGRAM_BOT_TOKEN` (secret) - Telegram bot token
- `TELEGRAM_CHAT_ID` (var) - Target chat ID

## IMPLEMENTATION GUIDELINES

### 1. Main Entry Point ([src/index.ts](mdc:src/index.ts))
- Export default object with `scheduled` handler
- Use `ScheduledEvent`, `Env`, `ExecutionContext` types
- Implement error handling with try-catch
- Add logging for debugging
- Keep logic minimal - delegate to service classes

### 2. Pinterest Client ([src/pinterest.ts](mdc:src/pinterest.ts))
- Use factory pattern: `createPinterestClient(cookie: string)`
- Cookie passed to factory, not individual methods
- Implement `getRandomPin()` method
- API endpoint: Undocumented `UserHomefeedResource` endpoint.
- Use Cookie-based authentication.
- Select random pin from results
- Return structured pin data

### 3. Telegram Client ([src/telegram.ts](mdc:src/telegram.ts))
- Use factory pattern: `createTelegramClient(token: string)`
- Token passed to factory, not individual methods
- Implement `sendMessage(chatId: string, message: string)` method
- Implement `sendErrorMessage(chatId: string, error: string)` method
- API endpoint: `https://api.telegram.org/bot{token}/sendMessage`
- Use POST method with JSON payload
- Format message with Markdown support

### 4. Types ([src/types.ts](mdc:src/types.ts))
- Define `PinterestItem` interface with: id, title, description, link, board_name, created_at, image_url
- Define interfaces for undocumented Pinterest API responses
- Define `TelegramMessage` interface for message payloads
- Use auto-generated `Env` interface from `wrangler types`
- Use readonly properties where appropriate

### 5. Utilities ([src/utils.ts](mdc:src/utils.ts))
- Message formatting utilities for pins
- Markdown escaping functions
- Date formatting functions
- Random selection utilities
- Error message formatting for Telegram notifications

### 6. Error Handling
- Wrap all async operations in try-catch
- Send error notifications to Telegram if Pinterest API fails
- Provide meaningful error messages
- Use console.error for logging
- Don't crash on single API failure

## API DETAILS

### Pinterest API (Undocumented)
- Authentication: `Cookie` header with session cookie
- Get pins from home feed: `GET /_ngjs/resource/UserHomefeedResource/get/`
- Response includes resource_response with pin data array

### Telegram Bot API
- Send message: `POST /bot{token}/sendMessage`
- Payload: `{"chat_id": "...", "text": "...", "parse_mode": "Markdown"}`

### Message Format Template
```
üìå *{title}*

üîó [View Pin](mdc:{link})
üñºÔ∏è [Image](mdc:{image_url})

üìÖ Pinned on {date}
```

### Error Message Template
```
üö® *Daily Pin Bot Error*

‚ùå Failed to fetch pin from Pinterest

*Error Details:*
{error_description}

*Time:* {timestamp}

Please check your Pinterest cookie.
```

## DO NOT INCLUDE
- External dependencies beyond TypeScript types
- Database or storage solutions
- Complex state management
- Authentication beyond API tokens
- File system operations
- Multiple environments beyond what's configured
- Pagination handling (collection has max 30 articles)

## DEPLOYMENT NOTES
- Code will be deployed via `wrangler deploy`
- Runs on Cloudflare Workers runtime
- Cron trigger configured in [wrangler.jsonc](mdc:wrangler.jsonc)
- Secrets managed via Wrangler CLI
- No build process needed beyond TypeScript compilation
- Use `wrangler types` to generate environment variable types

Start with implementing the types and basic structure, then move to API clients, and finally the main handler.
